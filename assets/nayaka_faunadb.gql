# Prohibited Word
type ProhibitedWord @collection(name: "words") {
    patterns: [String] # regex patterns
    patternFlag: String 
    
    words: [String]
    caseSensitive: Boolean
    group: Group! @relation
}

# Prohibited Links
type ProhibitedLink @collection(name: "links") {
    patterns: [String]
    patternFlag: String

    cleanUrls: [String] # cleanup urls (e.g subdo.domain.com, domain.com)
    group: Group! @relation
}

# GroupSetting action
enum GroupSettingAction {
    Delete,
    Ignore,
    Kick
}

# Group Settings
type GroupSetting {
    enabled: Boolean!
    sendToGroup: Boolean!
    action: GroupSettingAction!
}

type GroupPromotionSetting {
    enabled: Boolean!
    sendToGroup: Boolean!
    action: GroupSettingAction!

    byTags: Boolean!
    byLinks: Boolean!
    bypassHastag: [String]!
}

# GroupSettings
type GroupSettings @collection(name: "group-settings") {
    prohibitedLinks: GroupSetting!
    prohibitedWords: GroupSetting!

    promotion: GroupPromotionSetting!

    group: Group! @relation
}

# Group
type Group @collection(name: "groups") {
    id: String!
    settings: GroupSettings! @relation
    
    links: [ProhibitedLink] @relation
    words: [ProhibitedWord] @relation
}

type Query {
    findGroupById(id: String!): Group @index(name: "id")
}